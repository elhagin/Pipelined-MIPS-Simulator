package stages;

import mainUnits.CU;
import mainUnits.RegisterFile;
import pipelineRegisters.IDEXReg;
import pipelineRegisters.IFIDReg;

public class InstructionDecode {
	private String instruction;
	private String InstructionCU;
	private String InstructionReadRegister1;
	private String InstructionReadRegister2;
	private String InstructionWriteRegisterBeforeMux;
	private String InstructionSignExtend;

	public  void action(){
		instruction = IFIDReg.getInstruction();
		CU.inputOpCode(instruction.substring(0, 6));
		IDEXReg.setMemToReg(CU.getMemToReg());
		IDEXReg.setBranch(CU.getBranch());
		IDEXReg.setAluOp0(CU.getALUOp0());
		IDEXReg.setAluOp1(CU.getALUOp1());
		IDEXReg.setAluSrc(CU.getALUSrc());
		IDEXReg.setRegDst(CU.getRegDst());
		IDEXReg.setRegWrite(CU.getRegWrite());
		IDEXReg.setMemWrite(CU.getMemWrite());
		IDEXReg.setMemRead(CU.getMemRead());
		int rs = RegisterFile.read(instruction.substring(6, 11));
		int rt = RegisterFile.read(instruction.substring(11, 16));
		IDEXReg.setRegData1(rs);
		IDEXReg.setRegData2(rt);
		IDEXReg.setRd(instruction.substring(16, 21));
		IDEXReg.setRt(instruction.substring(11, 16));
		IDEXReg.setImmediateConstant(Integer.parseInt(instruction.substring(16), 2));
	}
	public String getInstructionCU() {
		return InstructionCU;
	}
	public void setInstructionCU(String instructionCU) {
		InstructionCU = instructionCU;
	}
	public String getInstructionReadRegister1() {
		return InstructionReadRegister1;
	}
	public void setInstructionReadRegister1(String instructionReadRegister1) {
		InstructionReadRegister1 = instructionReadRegister1;
	}
	public String getInstructionReadRegister2() {
		return InstructionReadRegister2;
	}
	public void setInstructionReadRegister2(String instructionReadRegister2) {
		InstructionReadRegister2 = instructionReadRegister2;
	}
	public String getInstructionWriteRegisterBeforeMux() {
		return InstructionWriteRegisterBeforeMux;
	}
	public void setInstructionWriteRegisterBeforeMux(
			String instructionWriteRegisterBeforeMux) {
		InstructionWriteRegisterBeforeMux = instructionWriteRegisterBeforeMux;
	}
	public String getInstructionSignExtend() {
		return InstructionSignExtend;
	}
	public void setInstructionSignExtend(String instructionSignExtend) {
		InstructionSignExtend = instructionSignExtend;
	}
}
