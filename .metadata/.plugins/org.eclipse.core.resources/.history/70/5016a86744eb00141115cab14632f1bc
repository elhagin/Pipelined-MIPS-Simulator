package mainUnits;

public class CU {
	private static int Branch;
	private static int RegDst;
	private static int MemRead;
	private static int MemToReg;
	private static int ALUOp1;
	private static int ALUOp0;
	private static int MemWrite;
	private static int ALUSrc;
	private static int RegWrite;
	private static int Jump;
	
	public CU(){
		setALUOp1(0);
		setALUSrc(0);
		setBranch(0);
		setMemRead(0);
		setMemToReg(0);
		setMemWrite(0);
		setRegDst(0);
		setRegWrite(0);
	}
	
	public static void inputOpCode(String x){
		switch(x){
			case "000000"://R-format //DONE
				setALUOp1(1);
				setALUSrc(0); 
				setBranch(0);
				setMemRead(0);
				setMemToReg(0);
				setMemWrite(0);
				setRegDst(1);
				setRegWrite(1);
				setALUOp0(0);
				setJump(0);
			break;
			case "100000"://lb $
				setALUOp1(0);
				setALUSrc(0);
				setBranch(0);
				setMemRead(0);
				setMemToReg(0);
				setMemWrite(0);
				setRegDst(0);
				setRegWrite(0);
				setALUOp0(0);
				setJump(0);
				break;
			case "001000"://addi //DONE
				setALUOp1(0);
				setALUSrc(1);
				setBranch(0);
				setMemRead(0);
				setMemToReg(1);
				setMemWrite(0);
				setRegDst(0);
				setRegWrite(1);
				setALUOp0(0);
				setJump(0);
				break;
			case "100011"://lw //DONE
				setALUOp1(0);
				setALUSrc(1);
				setBranch(0);
				setMemRead(1);
				setMemToReg(1);
				setMemWrite(0);
				setRegDst(0);
				setRegWrite(1);
				setALUOp0(0);
				setJump(0);
				break;
			case "100100"://lbu $
				setALUOp1(0);
				setALUSrc(0);
				setBranch(0);
				setMemRead(0);
				setMemToReg(0);
				setMemWrite(0);
				setRegDst(0);
				setRegWrite(0);
				setALUOp0(0);
				setJump(0);
				break;
			case "101011"://sw //DONE
				setALUOp1(0);
				setALUSrc(1);
				setBranch(0);
				setMemRead(0);
				setMemToReg(2);
				setMemWrite(1);
				setRegDst(2);
				setRegWrite(0);
				setALUOp0(0);
				setJump(0);
				break;
			case "101000"://sb $
				setALUOp1(0);
				setALUSrc(0);
				setBranch(0);
				setMemRead(0);
				setMemToReg(0);
				setMemWrite(0);
				setRegDst(0);
				setRegWrite(0);
				setALUOp0(0);
				setJump(0);
				break;
			case "001111"://lui $
				setALUOp1(0);
				setALUSrc(0);
				setBranch(0);
				setMemRead(0);
				setMemToReg(0);
				setMemWrite(0);
				setRegDst(0);
				setRegWrite(0);
				setALUOp0(0);
				setJump(0);
				break;
			case "000010"://j //DONE
				setALUOp1(0);
				setALUSrc(2);
				setBranch(0);
				setMemRead(0);
				setMemToReg(2);
				setMemWrite(0);
				setRegDst(2);
				setRegWrite(0);
				setALUOp0(0);
				setJump(1);
				break;
			case "000100"://beq //DONE
				setALUOp1(0);
				setALUSrc(0);
				setBranch(1);
				setMemRead(0);
				setMemToReg(2);
				setMemWrite(0);
				setRegDst(2);
				setRegWrite(0);
				setALUOp0(1);
				setJump(0);
				break;
			case "000101"://bne //DONE but not sure
				setALUOp1(0);
				setALUSrc(0);
				setBranch(1);
				setMemRead(0);
				setMemToReg(2);
				setMemWrite(0);
				setRegDst(2);
				setRegWrite(0);
				setALUOp0(1);
				setJump(0);
				break;
			case "000011"://jal $
				setALUOp1(0);
				setALUSrc(0);
				setBranch(0);
				setMemRead(0);
				setMemToReg(0);
				setMemWrite(0);
				setRegDst(0);
				setRegWrite(0);
				setALUOp0(0);
				setJump(0);
				break;
		}
	}

	public static int getBranch() {
		return Branch;
	}

	public static void setBranch(int branch) {
		Branch = branch;
	}

	public static int getRegDst() {
		return RegDst;
	}

	public static void setRegDst(int regDst) {
		RegDst = regDst;
	}

	public static int getMemRead() {
		return MemRead;
	}

	public static void setMemRead(int memRead) {
		MemRead = memRead;
	}

	public static int getMemToReg() {
		return MemToReg;
	}

	public static void setMemToReg(int memToReg) {
		MemToReg = memToReg;
	}

	public static int getALUOp1() {
		return ALUOp1;
	}

	public static void setALUOp1(int aLUOp1) {
		ALUOp1 = aLUOp1;
	}

	public static int getALUOp0() {
		return ALUOp0;
	}

	public static void setALUOp0(int aLUOp0) {
		ALUOp0 = aLUOp0;
	}

	public static int getMemWrite() {
		return MemWrite;
	}

	public static void setMemWrite(int memWrite) {
		MemWrite = memWrite;
	}

	public static int getALUSrc() {
		return ALUSrc;
	}

	public static void setALUSrc(int aLUSrc) {
		ALUSrc = aLUSrc;
	}

	public static int getRegWrite() {
		return RegWrite;
	}

	public static void setRegWrite(int regWrite) {
		RegWrite = regWrite;
	}

	public static int getJump() {
		return Jump;
	}

	public static void setJump(int jump) {
		Jump = jump;
	}
}
