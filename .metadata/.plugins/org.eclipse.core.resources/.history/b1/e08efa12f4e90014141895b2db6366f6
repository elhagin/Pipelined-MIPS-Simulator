package mainUnits;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import memory.CU;
import memory.InstructionDecode;
import memory.InstructionFetch;

public class Simulator {
	private static int PC;
	private static InstructionFetch fetchUnit ;
	private static InstructionDecode decodeUnit ;
	private static ArrayList <String> dataMemory;
	private static ArrayList<String> instructionMemory;
	private CU controlUnit;
	private static Reader r;
	private static HashMap<String, Integer> labels;
	private static HashMap<String, Integer> declarations;
	
	public static int getPC() {
		return PC;
	}

	public static void setPC(int pC) {
		Simulator.PC = pC;
	}

	public static Reader getR() {
		return r;
	}

	public static void setR(Reader r) {
		Simulator.r = r;
	}

	public Simulator(){
		PC = 0;
		fetchUnit = new InstructionFetch();
		decodeUnit = new InstructionDecode();
		dataMemory = new ArrayList <String>();
		instructionMemory = new ArrayList <String>();
		labels = new HashMap<String, Integer>();
		declarations = new HashMap<String, Integer>();
		controlUnit = new CU();
		r = new Reader();
	}
	
	public static void main(String[]args) throws IOException{
		new Simulator();
		addInstructionsCodeToMemory();
		fetchUnit.action();
		decodeUnit.action();
		System.out.println(decodeUnit.getInstructionCU());
	}
	
	public static void addInstructionsCodeToMemory() throws IOException{
		FileReader fileReader = new FileReader("program.txt");
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		String line;
		while ((line = bufferedReader.readLine()) != null)
		{
			String encoding = r.encodeCode(line);
			if (!encoding.equals("nodata"))
			{
				instructionMemory.add(encoding);
			}
		}
		bufferedReader.close();		
	}
}
