package mainUnits;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import pipelineRegisters.EXMemReg;
import pipelineRegisters.IDEXReg;
import pipelineRegisters.IFIDReg;
import pipelineRegisters.MemWBReg;
import stages.DataMemory;
import stages.InstructionDecode;
import stages.InstructionExecute;
import stages.InstructionFetch;
import stages.WriteBack;

public class Simulator {
	private static int PC;
	private static Thread fetchStage = new Thread(new InstructionFetch());
	private static Thread decodeStage = new Thread(new InstructionDecode());
	private static Thread executeStage = new Thread(new InstructionExecute());
	private static Thread memoryStage = new Thread(new DataMemory());
	private static Thread wbStage = new Thread(new WriteBack());
	private static ResettableCountDownLatch latch1 = new ResettableCountDownLatch(0);
	private static ResettableCountDownLatch latch2 = new ResettableCountDownLatch(0);
	private static ResettableCountDownLatch latch3 = new ResettableCountDownLatch(0);
	private static ResettableCountDownLatch latch4 = new ResettableCountDownLatch(0);
	private static String[] dataMemory;
	private static String[] instructionMemory;
	private static CU controlUnit;
	private static Reader r;
	private static HashMap<String, Integer> labels;
	private static HashMap<String, Integer> declarations;
	private static IFIDReg iFID;
	private static IDEXReg iDEX;
	private static EXMemReg eXMem;
	private static MemWBReg memWB;
	private static int instructions = 0;
	private static int memoryPointer = 0;
	private static int clock = 1;
	
	public static int getPC() {
		return PC;
	}

	public static void setPC(int pC) {
		Simulator.PC = pC;
	}

	public static Reader getR() {
		return r;
	}

	public static void setR(Reader r) {
		Simulator.r = r;
	}

	public Simulator() throws IOException, InterruptedException{
		PC = 0;
		iFID = new IFIDReg();
		iDEX = new IDEXReg();
		eXMem = new EXMemReg();
		memWB = new MemWBReg();
		dataMemory = new String[4096];
		instructionMemory = new String[4096];
		labels = new HashMap<String, Integer>();
		declarations = new HashMap<String, Integer>();
		controlUnit = new CU();
		r = new Reader();
		addInstructionsCodeToMemory();
		
		fetchStage.start();
		clock++;
		
		while(fetchStage.isAlive());
		latch1 = new ResettableCountDownLatch(1);
		decodeStage.start();
		fetchStage = new Thread(new InstructionFetch());
		fetchStage.start();
		clock++;
		
		while(decodeStage.isAlive() || fetchStage.isAlive());
		latch2 = new ResettableCountDownLatch(1);
		executeStage.start();
		decodeStage = new Thread(new InstructionDecode());
		decodeStage.start();
		fetchStage = new Thread(new InstructionFetch());
		fetchStage.start();
		clock++;
		
		while(executeStage.isAlive() || decodeStage.isAlive() || fetchStage.isAlive());
		latch3 = new ResettableCountDownLatch(1);
		memoryStage.start();
		executeStage = new Thread(new InstructionExecute());
		executeStage.start();
		decodeStage = new Thread(new InstructionDecode());
		decodeStage.start();
		fetchStage = new Thread(new InstructionFetch());
		fetchStage.start();
		clock++;
		
		while(memoryStage.isAlive() || executeStage.isAlive() || decodeStage.isAlive() || fetchStage.isAlive());
		latch4 = new ResettableCountDownLatch(1);
		wbStage.start();
		memoryStage = new Thread(new DataMemory());
		memoryStage.start();
		executeStage = new Thread(new InstructionExecute());
		executeStage.start();
		decodeStage = new Thread(new InstructionDecode());
		decodeStage.start();
		fetchStage = new Thread(new InstructionFetch());
		fetchStage.start();
		
		for (int i = 0; i < instructions; i++)
		{
			while(wbStage.isAlive() || memoryStage.isAlive() || executeStage.isAlive() || decodeStage.isAlive() || fetchStage.isAlive());
		}
	}
	
	public static void main(String[]args) throws IOException, InterruptedException{
		new Simulator();
		System.out.println(RegisterFile.getT0());
		System.out.println(RegisterFile.getT1());
		System.out.println(RegisterFile.getT2());
		System.out.println(dataMemory[0]);
	}
	
	public static void addInstructionsCodeToMemory() throws IOException{
		FileReader fileReader = new FileReader("program.txt");
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		String line;
		while ((line = bufferedReader.readLine()) != null)
		{
			String encoding = r.encodeCode(line);
			if (!encoding.equals("nodata"))
			{
				instructionMemory[instructions] = encoding;
				instructions++;
			}
		}
		instructionMemory[instructions] = "DONE";
		bufferedReader.close();		
	}
	
	public static CU getControlUnit() {
		return controlUnit;
	}

	public static void setControlUnit(CU controlUnit) {
		Simulator.controlUnit = controlUnit;
	}

	public static HashMap<String, Integer> getLabels() {
		return labels;
	}

	public static void setLabels(HashMap<String, Integer> labels) {
		Simulator.labels = labels;
	}

	public static HashMap<String, Integer> getDeclarations() {
		return declarations;
	}

	public static void setDeclarations(HashMap<String, Integer> declarations) {
		Simulator.declarations = declarations;
	}

	public static IDEXReg getiDEX() {
		return iDEX;
	}

	public static void setiDEX(IDEXReg iDEX) {
		Simulator.iDEX = iDEX;
	}

	public static IFIDReg getiFID() {
		return iFID;
	}

	public static void setiFID(IFIDReg iFID) {
		Simulator.iFID = iFID;
	}

	public static EXMemReg geteXMem() {
		return eXMem;
	}

	public static void seteXMem(EXMemReg eXMem) {
		Simulator.eXMem = eXMem;
	}

	public static MemWBReg getMemWB() {
		return memWB;
	}

	public static void setMemWB(MemWBReg memWB) {
		Simulator.memWB = memWB;
	}

	public static String[] getDataMemory() {
		return dataMemory;
	}

	public static void setDataMemory(String[] dataMemory) {
		Simulator.dataMemory = dataMemory;
	}

	public static String[] getInstructionMemory() {
		return instructionMemory;
	}

	public static void setInstructionMemory(String[] instructionMemory) {
		Simulator.instructionMemory = instructionMemory;
	}

	public static int getI() {
		return instructions;
	}

	public static void setI(int i) {
		Simulator.instructions = i;
	}

	public static int getMemoryPointer() {
		return memoryPointer;
	}

	public static void setMemoryPointer(int memoryPointer) {
		Simulator.memoryPointer = memoryPointer;
	}

	public static ResettableCountDownLatch getLatch1() {
		return latch1;
	}

	public static ResettableCountDownLatch getLatch2() {
		return latch2;
	}

	public static ResettableCountDownLatch getLatch3() {
		return latch3;
	}

	public static ResettableCountDownLatch getLatch4() {
		return latch4;
	}

	public static Thread getFetchStage() {
		return fetchStage;
	}

	public static void setFetchStage(Thread fetchStage) {
		Simulator.fetchStage = fetchStage;
	}

	public static Thread getDecodeStage() {
		return decodeStage;
	}

	public static void setDecodeStage(Thread decodeStage) {
		Simulator.decodeStage = decodeStage;
	}

	public static Thread getExecuteStage() {
		return executeStage;
	}

	public static void setExecuteStage(Thread executeStage) {
		Simulator.executeStage = executeStage;
	}

	public static Thread getMemoryStage() {
		return memoryStage;
	}

	public static void setMemoryStage(Thread memoryStage) {
		Simulator.memoryStage = memoryStage;
	}

	public static Thread getWbStage() {
		return wbStage;
	}

	public static void setWbStage(Thread wbStage) {
		Simulator.wbStage = wbStage;
	}

	public static int getClock() {
		return clock;
	}

	public static void setClock(int clock) {
		Simulator.clock = clock;
	}

	public static void setLatch1(ResettableCountDownLatch latch1) {
		Simulator.latch1 = latch1;
	}

	public static void setLatch2(ResettableCountDownLatch latch2) {
		Simulator.latch2 = latch2;
	}

	public static void setLatch3(ResettableCountDownLatch latch3) {
		Simulator.latch3 = latch3;
	}

	public static void setLatch4(ResettableCountDownLatch latch4) {
		Simulator.latch4 = latch4;
	}
}
