package stages;

import mainUnits.Simulator;
import pipelineRegisters.EXMemReg;
import pipelineRegisters.MemWBReg;

public class DataMemory
{
	public void run()
	{
		int regWrite;
		int zeroFlag;
		int branch;
		int memWrite;
		int memRead;
		int aluResult;
		int regData2;
		int memToReg;
		String destinationReg;
		int newPC;
		synchronized(EXMemReg.class)
		{
			regWrite = EXMemReg.getRegWrite();
			zeroFlag = EXMemReg.getZeroFlag();
			branch = EXMemReg.getBranch();
			memWrite = EXMemReg.getMemWrite();
			memRead = EXMemReg.getMemRead();
			aluResult = EXMemReg.getAluResult();
			regData2 = EXMemReg.getRegData2();
			memToReg = EXMemReg.getMemToReg();
			destinationReg = EXMemReg.getDestinationReg();
			newPC = EXMemReg.getNewPC();
		}

		if ((branch & zeroFlag) == 1)
			Simulator.setPC(newPC);
		String readData = "";
		if (memWrite == 1)
		{
			String data = Integer.toBinaryString(regData2);
			while (data.length() < 32)
				data = "0" + data;
			Simulator.getDataMemory()[aluResult] = data;
		}
		if (memRead == 1)
		{
			readData = Simulator.getDataMemory()[aluResult];
		}

		synchronized(Simulator.getMemWB())
		{
			MemWBReg.setAluResult(aluResult);
			MemWBReg.setMemoryData(readData);
			MemWBReg.setMemToReg(memToReg);
			MemWBReg.setDestinationReg(destinationReg);
			MemWBReg.setRegWrite(regWrite);
			Simulator.getMemWB().notify();
		}
	}     
}
